Interactions: CONTEXT = 
BEGIN
  STAGE : TYPE = {m_kid,f_kid,m_sm,f_sm,m_rut,f_rut,pregnant,weaning,null};
  HEALTH : TYPE = {healthy,unhealthy,dead};
  NUMBER : TYPE = [0..15]; %max # of ibex in herd
  CELL : TYPE = {c1,c2,c3,c4,c5,c6,c7,c8,c9}; %for a larger area, consider using (x,y) coordinate system
  FLAG : TYPE = BOOLEAN;
  RESOURCES : TYPE = {zero,low,high};
  MONTH : TYPE = {Jan,Feb,March,Apr,May,June,July,Aug,Sept,Oct,Nov,Dec}; %month
  HERDtuple : TYPE = [ARRAY STAGE OF NUMBER, ARRAY STAGE OF HEALTH]; 

 	floor_div2(n : NUMBER) : NUMBER = 
		IF n mod 2 = 0 THEN n div 2
		ELSE (n-1) div 2	
		ENDIF;
		
	ceiling_div2(n : NUMBER) : NUMBER =
		IF n mod 2 = 0 THEN n div 2
		ELSE (n+1) div 2
		ENDIF; 
		
  	inc_h_down(h : HEALTH): HEALTH = 
  		IF h=healthy THEN unhealthy
  		ELSE dead
  		ENDIF;

  	inc_h_up(h : HEALTH): HEALTH = 
  		IF h=dead THEN dead
  		ELSE healthy
  		ENDIF;
    		
  	inc_r_down(r : RESOURCES): RESOURCES =
  		IF r=high THEN low
  		ELSE zero
  		ENDIF;
  		
  	inc_r_up(r : RESOURCES): RESOURCES = 
  		IF r=zero THEN low
  		ELSE high
  		ENDIF;
  		
 	aug_h(h : HEALTH, p : FLAG, r : RESOURCES): HEALTH = 
 	  	IF r = zero OR p = TRUE THEN inc_h_down(h)
  		ELSE inc_h_up(h)
  		ENDIF; 
  	
  	inc_stage_h(s: STAGE, h : HEALTH, p : FLAG, r : RESOURCES, A : ARRAY STAGE OF HEALTH): HEALTH = 
  	  	IF A=[[i:STAGE] healthy] AND s=weaning THEN aug_h(h, p, r)
  		ELSIF A[weaning]=unhealthy AND s=pregnant THEN aug_h(h, p, r)
  		ELSIF A[weaning]=unhealthy AND A[pregnant]=unhealthy AND s=m_kid OR s=f_kid THEN aug_h(h, p, r)
  		ELSIF A[weaning]=unhealthy AND A[pregnant]=unhealthy AND A[m_kid]=unhealthy 
  				AND A[f_kid]=unhealthy AND s=f_rut OR s=m_rut THEN aug_h(h, p, r)
  		ELSIF A[weaning]=unhealthy AND A[pregnant]=unhealthy AND A[m_kid]=unhealthy 
  				AND A[f_kid]=unhealthy AND A[f_rut]=unhealthy AND A[m_rut]=unhealthy 
  				AND s=f_sm OR s=m_sm THEN aug_h(h, p, r)
  		ELSIF A=[[i:STAGE] unhealthy] AND s=weaning THEN aug_h(h, p, r)
		ELSIF A[weaning]=dead AND s=pregnant THEN aug_h(h, p, r)
  		ELSIF A[weaning]=dead AND A[pregnant]=dead AND s=m_kid OR s=f_kid THEN aug_h(h, p, r)
  		ELSIF A[weaning]=dead AND A[pregnant]=dead AND A[m_kid]=dead AND A[f_kid]=dead 
  				AND s=f_rut OR s=m_rut THEN aug_h(h, p, r)
  		ELSIF A[weaning]=dead AND A[pregnant]=dead AND A[m_kid]=dead AND A[f_kid]=dead 
  				AND A[f_rut]=dead AND A[m_rut]=dead AND s=f_sm OR s=m_sm THEN aug_h(h, p, r)
  		ELSE aug_h(h, p, r)
  		ENDIF;
  	
  	health_fn(s : STAGE, h: HEALTH, No : ARRAY STAGE OF NUMBER, p : BOOLEAN, r : RESOURCES, A : ARRAY STAGE OF HEALTH): HEALTH =
  		IF s=null THEN healthy
  		ELSIF No[s]=0 THEN healthy
  		ELSIF h=dead THEN healthy
  		ELSE inc_stage_h(s, h, p, r, A)
  		ENDIF;
  		
  	mature(s : STAGE, No : ARRAY STAGE OF NUMBER, m : MONTH, f : BOOLEAN): NUMBER =
  		IF m=Sept THEN
  			IF s=m_sm THEN 0
  			ELSIF s=f_sm THEN 0
  			ELSIF s=m_rut THEN No[m_sm]
  			ELSIF s=f_rut THEN No[f_sm]
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Oct THEN
  			IF s=f_rut AND f=TRUE THEN 0
  			ELSIF s=pregnant AND f=TRUE THEN No[f_rut]
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Nov THEN
  			IF s=pregnant THEN 0
  			ELSIF s=weaning then No[pregnant]
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Dec THEN
  			IF s=m_kid OR s=f_kid THEN No[weaning]
  			ELSIF s=m_sm THEN No[m_rut] + No[m_sm] + No[m_kid]
  			ELSIF s=f_sm THEN No[f_rut] + No[f_sm] + No[f_kid] + No[weaning] + No[pregnant]
  			ELSIF s=m_rut OR s=f_rut OR s=pregnant OR s=weaning THEN 0
  			ELSE No[s]
  			ENDIF
  		ELSE No[s]
  		ENDIF; 
  		
  	tabulate(s : STAGE, No : ARRAY STAGE OF NUMBER, m : MONTH): NUMBER =
  	  	IF m=Sept THEN
  			IF s=m_sm THEN No[m_sm] + No[m_rut]
  			ELSIF s=f_sm THEN No[f_sm] + No[f_rut]
  			ELSIF s=m_rut or s=f_rut THEN 0
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Oct THEN
    		IF s=m_sm THEN No[m_sm] + No[m_rut]
  			ELSIF s=f_sm THEN No[f_sm] + No[f_rut] %pregnant ibex don't survive being unhealthy or predated
  			ELSIF s=m_rut or s=f_rut THEN 0
  			ELSIF s=pregnant THEN 0
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Nov THEN
    		IF s=m_sm THEN No[m_sm] + No[m_rut]
  			ELSIF s=f_sm THEN No[f_sm] + No[f_rut] + No[weaning]  %pregnant ibex don't survive being unhealthy or predated
  			ELSIF s=m_rut or s=f_rut THEN 0
  			ELSIF s=pregnant THEN 0
  			ELSIF s=weaning THEN 0
  			ELSE No[s]
  			ENDIF
  		ELSIF m=Dec THEN
  			IF s=m_kid THEN No[m_kid] %unhealthy kids do not mature, and there are no new kids because babies died whilst weaning
  			ELSIF s=f_kid THEN No[f_kid]
  			ELSIF s=m_sm THEN No[m_rut] + No[m_sm]
  			ELSIF s=f_sm THEN No[f_rut] + No[f_sm] + No[weaning]
  			ELSIF s=m_rut OR s=f_rut OR s=pregnant OR s=weaning THEN 0
  			ELSE No[s]
  			ENDIF
  		ELSE No[s]
  		ENDIF;
  		%order of incurring "unhealth": weaning, pregnant, kids, rut, sm
  		
  	stage_fn(s : STAGE, h: HEALTH, No : ARRAY STAGE OF NUMBER, m : MONTH, f : BOOLEAN, r : RESOURCES, p : BOOLEAN, A : ARRAY STAGE OF HEALTH): NUMBER = 
  		IF h=dead THEN 0
  		ELSIF s=null THEN 15 - (No[m_kid] + No[f_kid] + No[m_sm] + No[f_sm] 
				+ No[m_rut] + No[f_rut] + No[pregnant] + No[weaning])
  		ELSIF h=unhealthy OR r=zero OR p=TRUE THEN tabulate(s, No, m) %if currently unhealthy or about to be so, then don't mature
  		ELSIF h=healthy AND NOT s=null THEN mature(s, No, m, f)
  		ELSE No[s]
  		ENDIF;

  	fertility(m_rut : NUMBER, f_rut : NUMBER, m_rut_h : HEALTH, f_rut_h : HEALTH): BOOLEAN = 
  		IF m_rut > 0 AND f_rut > 0 AND m_rut_h=healthy AND f_rut_h=healthy THEN TRUE
  		ELSE FALSE
  		ENDIF;
  	
  	dangerous(c : CELL, p : CELL): BOOLEAN =
  		IF c=p THEN TRUE
  		ELSE FALSE
  		ENDIF;	
  		
  	ff_bigHerd(s : STAGE, bigA : ARRAY STAGE OF NUMBER, B : ARRAY STAGE OF NUMBER) : NUMBER =
  		IF s=m_sm THEN floor_div2(bigA[m_sm] + B[m_sm])
  		ELSIF s=f_sm THEN floor_div2(bigA[f_sm] + B[f_sm])
  		ELSE bigA[s]
  		ENDIF;
  	
  	ff_smallHerd(s : STAGE, A : ARRAY STAGE OF NUMBER, smallB : ARRAY STAGE OF NUMBER) : NUMBER =
  		IF s=m_sm THEN ceiling_div2(A[m_sm] + smallB[m_sm])
  		ELSIF s=f_sm THEN ceiling_div2(A[f_sm] + smallB[f_sm])
  		ELSE smallB[s]
  		ENDIF;
	
%---------------------------------------------------------------------------------------

  HerdA : MODULE =
  BEGIN
    LOCAL f : FLAG 						%fertility
	LOCAL p : CELL						%predator location
	LOCAL danger : FLAG 				%herd threatened by predator
	GLOBAL c : CELL						%herd location
    GLOBAL m : MONTH					%month
    GLOBAL A : HERDtuple				%herd A
    GLOBAL r : ARRAY CELL OF RESOURCES 	%landscape resources/food availability
    GLOBAL goA : FLAG					%time to step? 		
  
  DEFINITION
  	p IN {c6};
  	danger = dangerous(c,p);
  	f = fertility(A.1[m_rut], A.1[f_rut], A.2[m_rut], A.2[f_rut]);	
					
  INITIALIZATION
    A.1[m_kid] = 1;
	A.1[f_kid] = 1;
	A.1[m_sm] = 0;
	A.1[f_sm] = 1;
	A.1[m_rut] = 0;
	A.1[f_rut] = 0;
	A.1[pregnant] = 0;
	A.1[weaning] = 0;
	A.1[null] = 15 - (A.1[m_kid] + A.1[f_kid] + A.1[m_sm] + A.1[f_sm] 
				+ A.1[m_rut] + A.1[f_rut] + A.1[pregnant] + A.1[weaning]);
	A.2 = [[s:STAGE] healthy];
  	c = c1;
	r = [[c:CELL] zero];
	goA = TRUE;
	
  TRANSITION 
  [  
	 A.1[null] = 15 AND goA=TRUE --> c'=c;	 
     []
     c=c1 AND goA=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
		c' IN {c1,c2,c4,c5};
     	goA' = FALSE;		
     []
     c=c2 AND goA=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
		c' IN {c1,c2,c3,c4,c5,c6};
     	goA' = FALSE;
     []
    c=c3 AND goA=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
		c' IN {c2,c3,c5,c6};
     	goA' = FALSE;
    []
    c=c4 AND goA=TRUE --> 
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c1,c2,c4,c5,c7,c8};
     	goA' = FALSE;
    []
    c=c5 AND goA=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c1,c2,c3,c4,c5,c6,c7,c8,c9};
     	goA' = FALSE;
    []
    c=c6 AND goA=TRUE --> 
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c2,c3,c5,c6,c8,c9};
     	goA' = FALSE;
    []
    c=c7 AND goA=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c4,c5,c7,c8};
     	goA' = FALSE;
    []
    c=c8 AND goA=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c4,c5,c6,c7,c8,c9};
     	goA' = FALSE;
    []
    c=c9 AND goA=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		A'.1 =[[s:STAGE] stage_fn(s, A.2[s], A.1, m, f, r[c], danger, A.2)];
		A'.2 = [[s:STAGE] health_fn(s, A.2[s], A.1, danger, r[c], A.2)];
    	c' IN {c5,c6,c8,c9};
     	goA' = FALSE;
  ]
  END;
  
%---------------------------------------------------------------------------------------

  HerdB : MODULE =
  BEGIN
    LOCAL f : FLAG 						%fertility
	LOCAL p : CELL						%predator location
	LOCAL danger : FLAG 				%herd threatened by predator
	GLOBAL b : CELL						%herd location
    GLOBAL m : MONTH					%month
    GLOBAL B : HERDtuple				%herd B
    GLOBAL r : ARRAY CELL OF RESOURCES 	%landscape resources/food availability
    GLOBAL goB : FLAG					%time to step? 		

  
  DEFINITION
  	p IN {c8};
  	danger = dangerous(b,p);
  	f = fertility(B.1[m_rut], B.1[f_rut], B.2[m_rut], B.2[f_rut]);	
					
  INITIALIZATION
    B.1[m_kid] = 0;
	B.1[f_kid] = 0;
	B.1[m_sm] = 2;
	B.1[f_sm] = 2;
	B.1[m_rut] = 0;
	B.1[f_rut] = 0;
	B.1[pregnant] = 0;
	B.1[weaning] = 0;
	B.1[null] = 15 - (B.1[m_kid] + B.1[f_kid] + B.1[m_sm] + B.1[f_sm] 
				+ B.1[m_rut] + B.1[f_rut] + B.1[pregnant] + B.1[weaning]);
	B.2 = [[s:STAGE] healthy];
  	b = c1;
	r = [[c:CELL] zero];
	goB = TRUE;
	
  TRANSITION 
  [
	 B.1[null]=15 AND goB=TRUE --> b'=b;	 
     []
     b=c1 AND goB=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
		b' IN {c1,c2,c4,c5};
		goB' = FALSE; 		
     []
     b=c2 AND goB=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
		b' IN {c1,c2,c3,c4,c5,c6};
		goB' = FALSE; 
     []
     b=c3 AND goB=TRUE -->
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
		b' IN {c2,c3,c5,c6};
		goB' = FALSE; 
     []
     b=c4 AND goB=TRUE --> 
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c1,c2,c4,c5,c7,c8};
		goB' = FALSE; 
     []
     b=c5 AND goB=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c1,c2,c3,c4,c5,c6,c7,c8,c9};
		goB' = FALSE;
     []
     b=c6 AND goB=TRUE --> 
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c2,c3,c5,c6,c8,c9};
		goB' = FALSE; 
     []
     b=c7 AND goB=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c4,c5,c7,c8};
		goB' = FALSE; 
     []
     b=c8 AND goB=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c4,c5,c6,c7,c8,c9};
		goB' = FALSE; 
     []
     b=c9 AND goB=TRUE -->  
    	r'=[[c:CELL] if c=c1 then inc_r_down(r[c]) else inc_r_up(r[c]) endif]; 
		B'.1 =[[s:STAGE] stage_fn(s, B.2[s], B.1, m, f, r[b], danger, B.2)];
		B'.2 = [[s:STAGE] health_fn(s, B.2[s], B.1, danger, r[b], B.2)];
    	b' IN {c5,c6,c8,c9};
		goB' = FALSE;
  ]
  END;
  
%---------------------------------------------------------------------------------------

  Calendar : MODULE =
  BEGIN
  	GLOBAL m : MONTH
  	GLOBAL goA : BOOLEAN	
  	GLOBAL goB : BOOLEAN
  	GLOBAL goInter : BOOLEAN
  
  INITIALIZATION
  	m=Sept;
  	goA=TRUE;
  	goB=TRUE;
	goInter=TRUE;
	
  TRANSITION
  [
  		m=Jan AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Feb; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Feb AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=March; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=March AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Apr; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Apr AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=May; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=May AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=June; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=June AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=July; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=July AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Aug; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Aug AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Sept; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Sept AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Oct; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Oct AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Nov; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Nov AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Dec; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  		[]
  		m=Dec AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> m'=Jan; goA'=TRUE; goB'=TRUE; goInter'=TRUE;
  ]
  END;
  
%---------------------------------------------------------------------------------------

  Interactions : MODULE = 
  BEGIN
  	GLOBAL c : CELL
  	GLOBAL b : CELL
  	GLOBAL goA : BOOLEAN
  	GLOBAL goB : BOOLEAN
  	GLOBAL goInter : BOOLEAN 
  	GLOBAL A : HERDtuple
  	GLOBAL B : HERDtuple
  
  INITIALIZATION
  	A.1[m_kid] = 1;
	A.1[f_kid] = 1;
	A.1[m_sm] = 0;
	A.1[f_sm] = 1;
	A.1[m_rut] = 0;
	A.1[f_rut] = 0;
	A.1[pregnant] = 0;
	A.1[weaning] = 0;
	A.1[null] = 15 - (A.1[m_kid] + A.1[f_kid] + A.1[m_sm] + A.1[f_sm] 
				+ A.1[m_rut] + A.1[f_rut] + A.1[pregnant] + A.1[weaning]);
	A.2 = [[s:STAGE] healthy];
  	c = c1;
	goA = TRUE;
    B.1[m_kid] = 0;
	B.1[f_kid] = 0;
	B.1[m_sm] = 2;
	B.1[f_sm] = 2;
	B.1[m_rut] = 0;
	B.1[f_rut] = 0;
	B.1[pregnant] = 0;
	B.1[weaning] = 0;
	B.1[null] = 15 - (B.1[m_kid] + B.1[f_kid] + B.1[m_sm] + B.1[f_sm] 
				+ B.1[m_rut] + B.1[f_rut] + B.1[pregnant] + B.1[weaning]);
	B.2 = [[s:STAGE] healthy];
  	b = c1;
	goB = TRUE;
	goInter=TRUE;
		%can I just pass in A.1 and B.1?
		
  TRANSITION
  [
	b=c AND goA=FALSE AND goB=FALSE AND goInter=TRUE --> 
		A'.1[m_sm]=if B.1[null] > A.1[null] then ff_bigHerd(m_sm, A.1, B.1) else ff_smallHerd(m_sm, A.1, B.1) endif;
		A'.1[f_sm]=if B.1[null] > A.1[null] then ff_bigHerd(f_sm, A.1, B.1) else ff_smallHerd(f_sm, A.1, B.1) endif;
		A'.1[null]=(15 - (A'.1[m_kid] + A'.1[f_kid] + A'.1[m_sm] + A'.1[f_sm] + A'.1[m_rut] + A'.1[f_rut] + A'.1[pregnant] + A'.1[weaning]));
		B'.1[m_sm]=if B.1[null] < A.1[null] then ff_bigHerd(m_sm, A.1, B.1) else ff_smallHerd(m_sm, A.1, B.1) endif;
		B'.1[f_sm]=if B.1[null] < A.1[null] then ff_bigHerd(f_sm, A.1, B.1) else ff_smallHerd(f_sm, A.1, B.1) endif;
		B'.1[null]=(15 - (B'.1[m_kid] + B'.1[f_kid] + B'.1[m_sm] + B'.1[f_sm] + B'.1[m_rut] + B'.1[f_rut] + B'.1[pregnant] + B'.1[weaning]));
	 	goInter'=FALSE;
	 %this guard mediates fission-fusion dynamics
	[]
	NOT b=c AND goA=FALSE AND goB=FALSE AND goInter=FALSE --> goInter'=FALSE;
  ]
  END;
  
%---------------------------------------------------------------------------------------

  Environment : MODULE = Calendar[]HerdA[]HerdB[]Interactions;

%sal > (start-simulation! "Environment")
%*** ERROR:bigloo:
%`segmentation violation' exception -- raised
%    1. make-fsm, sal-simulator-front-end.scm:char 1658
%    2. ... start-simulation!, stdin:char 25

%---------------------------------------------------------------------------------------

END

% no extinction (a liveness condition): you enter the lifestages infinitely many times
